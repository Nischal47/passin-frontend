{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-10T10:40:22.746Z",
    "end": "2021-06-10T10:40:30.106Z",
    "duration": 7360,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bbcf5871-73c7-4df5-8021-0bf8e7762b92",
      "title": "",
      "fullFile": "cypress/integration/examples/userMainPage.spec.js",
      "file": "cypress/integration/examples/userMainPage.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bf07211b-b557-4a85-a128-f161297ebbac",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "xhr test: Check GET password response.",
              "fullTitle": "Actions xhr test: Check GET password response.",
              "timedOut": null,
              "duration": 1542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(userId);\ncy.wait('@password').should(({\n  request,\n  response\n}) => {\n  // expect(request.url).to.match('/\\/user$/')        // regex aayena\n  expect(request.method).to.equal('GET');\n  expect(response.body).to.have.property('passwordList'); // expect(response.body.passwordList).to.have.lengthOf(3)\n  cy.log(response.body.passwordList);\n});",
              "err": {},
              "uuid": "1c64b297-88a0-4a47-b007-7c2dbfc87147",
              "parentUUID": "bf07211b-b557-4a85-a128-f161297ebbac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt last/bottom password",
              "fullTitle": "Actions decrypt last/bottom password",
              "timedOut": null,
              "duration": 3255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//CHECK IF added password is decrypted or not.\ncy.wait('@password').then(resp => {\n  const pwdLength = resp.response.body.passwordList.length;\n  if (pwdLength != 0) {\n    //click on decrypt password button icon\n    cy.get(`:nth-child(${pwdLength}) > :nth-child(5) > .actions > .pointer`).eq(1).click();\n    cy.get('input[name=\"originalPassword\"][type=\"password\"]').type(userDetail.password);\n    cy.intercept('POST', 'http://localhost:8080/api/passwords/decrypt-password').as('getPassword');\n    cy.get('.button-area > .btn').contains('Confirm').click();\n    cy.wait('@getPassword').then(resp => {\n      cy.get(`.content-table > tbody > :nth-child(${pwdLength}) > :nth-child(3) `).should('have.text', resp.response.body.decryptedPassword.password);\n    });\n  } else {\n    cy.log('User doesnot have saved passwords.');\n  }\n});",
              "err": {},
              "uuid": "6be8d275-8e73-4366-aadb-7a63e9ea23c1",
              "parentUUID": "bf07211b-b557-4a85-a128-f161297ebbac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c64b297-88a0-4a47-b007-7c2dbfc87147",
            "6be8d275-8e73-4366-aadb-7a63e9ea23c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4797,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34b18385-7843-4314-aefb-6375600d05ca",
          "title": "Add password",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for display of latest added password ",
              "fullTitle": "Add password Check for display of latest added password ",
              "timedOut": null,
              "duration": 2480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.fixture('savePassword').then(pwd => {\n  //add new password.\n  cy.request({\n    method: 'POST',\n    'auth': {\n      'bearer': window.localStorage.getItem('token')\n    },\n    //check for user id in pwd.json\n    url: 'http://localhost:8080/api/passwords/save-password',\n    failOnStatusCode: false,\n    body: pwd\n  });\n}); //always check for user id.\ncy.intercept('GET', `http://localhost:8080/api/passwords/get-passwords?user-id=${userId}`).as('password');\ncy.reload();\ncy.wait('@password').then(resp => {\n  expect(resp.response.body).to.have.property('passwordList');\n  const pwdLength = resp.response.body.passwordList.length;\n  cy.log(resp.response.body.passwordList.length);\n  if (pwdLength != 0) {\n    //the latest added password should not be empty.\n    cy.get(`.content-table > tbody > :nth-child(${pwdLength}) > :nth-child(3) `).should('not.be.empty');\n  }\n});",
              "err": {},
              "uuid": "3d48fce4-c6f3-4287-9935-82bc76f5cb13",
              "parentUUID": "34b18385-7843-4314-aefb-6375600d05ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d48fce4-c6f3-4287-9935-82bc76f5cb13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2480,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}